{"version":3,"sources":["webpack:///./src/templates/listing.jsx"],"names":["Paging","currentPageNum","pageCount","prevPage","nextPage","isFirstPage","isLastPage","className","to","icon","faAngleLeft","Array","map","_val","index","pageNum","key","faAngleRight","Listing","pageContext","postEdges","data","allMarkdownRemark","edges","title","config","siteTitle"],"mappings":"+PAWA,SAASA,EAAT,GAAgD,IAA9BC,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,UAC1BC,EAAWF,EAAiB,GAAM,EAAI,IAA3B,KAAqCA,EAAiB,GAAtD,IACXG,EAAQ,KAAOH,EAAiB,GAAxB,IACRI,EAAiC,IAAnBJ,EACdK,EAAaL,IAAmBC,EAEtC,OACE,yBAAKK,UAAU,qBACXF,GACA,kBAAC,OAAD,CAAMG,GAAIL,GACR,kBAAC,IAAD,CAAiBM,KAAMC,OAG1B,YAAIC,MAAMT,IAAYU,KAAI,SAACC,EAAMC,GAChC,IAAMC,EAAUD,EAAQ,EACxB,OACE,kBAAC,OAAD,CACEE,IAAG,gBAAkBD,EACrBP,GAAgB,IAAZO,EAAgB,IAAhB,IAA0BA,EAA1B,KAEHA,IAAYd,EACX,2BAAIc,GAEJ,8BAAOA,QAKbT,GACA,kBAAC,OAAD,CAAME,GAAIJ,GACR,kBAAC,IAAD,CAAiBK,KAAMQ,QA0BlBC,UAnBf,YAAyC,IAAtBC,EAAqB,EAArBA,YACXC,EADgC,EAARC,KACPC,kBAAkBC,MACzC,OACE,kBAAC,IAAD,KACE,yBAAKhB,UAAU,qBACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAQiB,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAaN,UAAWA,KAE1B,kBAACpB,EAAD,CACEC,eAAgBkB,EAAYlB,eAC5BC,UAAWiB,EAAYjB,gB","file":"component---src-templates-listing-jsx-27ecc5706f6b1c2e657b.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./listing.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Paging({ currentPageNum, pageCount }) {\n  const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n  const nextPage = `/${currentPageNum + 1}/`;\n  const isFirstPage = currentPageNum === 1;\n  const isLastPage = currentPageNum === pageCount;\n\n  return (\n    <div className=\"paging-container\">\n      {!isFirstPage && (\n        <Link to={prevPage}>\n          <FontAwesomeIcon icon={faAngleLeft} />\n        </Link>\n      )}\n      {[...Array(pageCount)].map((_val, index) => {\n        const pageNum = index + 1;\n        return (\n          <Link\n            key={`listing-page-${pageNum}`}\n            to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n          >\n            {pageNum === currentPageNum ? (\n              <b>{pageNum}</b>\n            ) : (\n              <span>{pageNum}</span>\n            )}\n          </Link>\n        );\n      })}\n      {!isLastPage && (\n        <Link to={nextPage}>\n          <FontAwesomeIcon icon={faAngleRight} />\n        </Link>\n      )}\n    </div>\n  );\n}\n\nfunction Listing({ pageContext, data }) {\n  const postEdges = data.allMarkdownRemark.edges;\n  return (\n    <Layout>\n      <div className=\"listing-container\">\n        <div className=\"posts-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <PostListing postEdges={postEdges} />\n        </div>\n        <Paging\n          currentPageNum={pageContext.currentPageNum}\n          pageCount={pageContext.pageCount}\n        />\n      </div>\n    </Layout>\n  );\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}