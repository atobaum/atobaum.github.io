{"componentChunkName":"component---src-templates-post-jsx","path":"/post/웹소켓에-대한-소고","result":{"data":{"blogPost":{"latex":false,"parent":{"__typename":"MarkdownRemark","internal":{"content":"## 개요\n웹소켓은 먼저 HTTP로 handshake를 한다.\n\n클라이언트는 먼저 HTTP 요청을 서버로 보내 프로토콜을 websocket으로 바꾸기를 요청한다:\n```http\nGET /chat HTTP/1.1\nHost: example.com:8000\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nSec-WebSocket-Version: 13\n\n```\n\n이때 `Sec-WebSocket-Key`는 서버와 웹소켓 악수(handshake)를 정상적으로 하기 위한 값이다. 이 값은 클라이언트에서 랜덤으로 만든 16 byte 값을 base64로 인코딩 한 것이다.\n\n서버는 요청을 검증하고 다음 응답을 보낸다.\n```http\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n\n```\n\n서버가 보내는 `Sec-WebSocket-Accept`는 클라이언트의 `Sec-WebSocket-Key`에다가 `258EAFA5-E914-47DA-95CA-C5AB0DC85B11`를 연결(문자열로)하고 SHA-1 해시값을 base64로 인코딩한 값이다.\n\n이 값은 클라이언트가 웹소켓을 지원하지 않는 서버에 연결한 것으로 착각하는 것을 막기 위한 값이다.\n\n\n![요청 예시](/images/chatting-with-websocket/request-example.jpg)\n- 요청 예시\n\n## Subprotocol\n웹소켓은 subprotocol을 가질 수 있다. 클라이언트가 요청 시 `Sec-WebSocket-Protocol` 헤더이 지정하면(comma-seperated list) 서버는 그에 따라 적절하게 처리할 수 있다.\n\n## 브라우저에서 사용해보자 \n### 연결하기\n```javascript\nlet ws = new WebSocket(\"ws://localhost:3000\");\nlet ws = new WebSocket(\"ws://localhost:3000\", \"echo\"); // 프로토콜을 줄 수 있다.\nlet ws = new WebSocket(\"ws://localhost:3000\", [\"echo\", \"chat\"]); // 여러개 줄 수도 있다.\n```\n\nWebSocket은 `CONNECTING, OPEN, CLOSING, CLOSED`의 네가지 상태를 가지고 있고 값은 `WebSocket.<status>`에 정의되어있다.\n\n연결이 되면 `OPEN` 상태로 바뀌고 그때부터 메시지를 전송할 수 있다.\nws.readystate로 현재 상태를 알 수 있다.\n\n### 전송하기\n```javascript\nws.send(\"message\");\n```\n\n보낼 수 있는 데이터는 String, Blob, ArrayBuffer로 JSON을 보내려면 stringify 해서 보내면 된다.\n\n### 전송 받기\n```javascript\nws.onmessage = (evt) => {\n\tconsole.log(evt.data);\n}\n```\n\n### 연결 끊기\n```javascript\nws.close();\n```\n\n### 핸들러\nWebSocket은 `onopen, onclose, onerror, onmessage` 핸들러를 가질 수 있다.\n\n\n## Node로 서버 구현\n많은 코드가 생략되었습니다.\n```javascript\nvar http = require(\"http\");\nvar webSocketServer = require(\"websocket\").server;\n\nvar connections = [];\nvar server = http.createServer();\nvar wsServer = new webSocketServer({\n  httpServer: server,\n});\n\nwsServer.on(\"request\", (req) => {\n  // chatting 프로토콜을 받는다.\n  var connection = req.accept(\"chatting\");\n\n  connections.push(connection);\n  console.log(new Date() + \" Connection accepted. Now \" + connections.length);\n\n  connection.on(\"message\", (message) => {\n    if (message.type === \"utf8\")\n      // 브로드캐스팅\n      connections.forEach((c) => c.send(message.utf8Data));\n  });\n\n  connection.on(\"close\", () => {\n    connections = connections.filter((c) => c != connection);\n    console.log(\n      new Date() + \" Connection disconnected. Now \" + connections.length\n    );\n  });\n});\n\nserver.listen(3000, () => {\n  console.log(\"Express start to lsten port 3000\");\n});\n```\n\n## Example\n[Github](https://github.com/atobaum/simple-chatting-websocket-example)에 간단한 예제를 올려놓았다.\n\n## Reference\n- [MDN](https://developer.mozilla.org/ko/docs/WebSockets/Writing_WebSocket_client_applications)\n- [High Performance Browser Networking](https://hpbn.co/websocket/)\n- [RFC6455](https://tools.ietf.org/html/rfc6455)\n","description":null,"ignoreType":null,"mediaType":null},"html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>웹소켓은 먼저 HTTP로 handshake를 한다.</p>\n<p>클라이언트는 먼저 HTTP 요청을 서버로 보내 프로토콜을 websocket으로 바꾸기를 요청한다:</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token request-line\"><span class=\"token property\">GET</span> /chat HTTP/1.1</span>\n<span class=\"token header-name keyword\">Host:</span> example.com:8000\n<span class=\"token header-name keyword\">Upgrade:</span> websocket\n<span class=\"token header-name keyword\">Connection:</span> Upgrade\n<span class=\"token header-name keyword\">Sec-WebSocket-Key:</span> dGhlIHNhbXBsZSBub25jZQ==\n<span class=\"token header-name keyword\">Sec-WebSocket-Version:</span> 13</code></pre></div>\n<p>이때 <code class=\"language-text\">Sec-WebSocket-Key</code>는 서버와 웹소켓 악수(handshake)를 정상적으로 하기 위한 값이다. 이 값은 클라이언트에서 랜덤으로 만든 16 byte 값을 base64로 인코딩 한 것이다.</p>\n<p>서버는 요청을 검증하고 다음 응답을 보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"http\"><pre class=\"language-http\"><code class=\"language-http\"><span class=\"token response-status\">HTTP/1.1 <span class=\"token property\">101 Switching Protocols</span></span>\n<span class=\"token header-name keyword\">Upgrade:</span> websocket\n<span class=\"token header-name keyword\">Connection:</span> Upgrade\n<span class=\"token header-name keyword\">Sec-WebSocket-Accept:</span> s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</code></pre></div>\n<p>서버가 보내는 <code class=\"language-text\">Sec-WebSocket-Accept</code>는 클라이언트의 <code class=\"language-text\">Sec-WebSocket-Key</code>에다가 <code class=\"language-text\">258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>를 연결(문자열로)하고 SHA-1 해시값을 base64로 인코딩한 값이다.</p>\n<p>이 값은 클라이언트가 웹소켓을 지원하지 않는 서버에 연결한 것으로 착각하는 것을 막기 위한 값이다.</p>\n<p><img src=\"/images/chatting-with-websocket/request-example.jpg\" alt=\"요청 예시\"></p>\n<ul>\n<li>요청 예시</li>\n</ul>\n<h2 id=\"subprotocol\" style=\"position:relative;\"><a href=\"#subprotocol\" aria-label=\"subprotocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subprotocol</h2>\n<p>웹소켓은 subprotocol을 가질 수 있다. 클라이언트가 요청 시 <code class=\"language-text\">Sec-WebSocket-Protocol</code> 헤더이 지정하면(comma-seperated list) 서버는 그에 따라 적절하게 처리할 수 있다.</p>\n<h2 id=\"브라우저에서-사용해보자\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"브라우저에서 사용해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저에서 사용해보자</h2>\n<h3 id=\"연결하기\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"연결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://localhost:3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://localhost:3000\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 프로토콜을 줄 수 있다.</span>\n<span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://localhost:3000\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"echo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chat\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여러개 줄 수도 있다.</span></code></pre></div>\n<p>WebSocket은 <code class=\"language-text\">CONNECTING, OPEN, CLOSING, CLOSED</code>의 네가지 상태를 가지고 있고 값은 <code class=\"language-text\">WebSocket.&lt;status&gt;</code>에 정의되어있다.</p>\n<p>연결이 되면 <code class=\"language-text\">OPEN</code> 상태로 바뀌고 그때부터 메시지를 전송할 수 있다.\nws.readystate로 현재 상태를 알 수 있다.</p>\n<h3 id=\"전송하기\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%86%A1%ED%95%98%EA%B8%B0\" aria-label=\"전송하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전송하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>보낼 수 있는 데이터는 String, Blob, ArrayBuffer로 JSON을 보내려면 stringify 해서 보내면 된다.</p>\n<h3 id=\"전송-받기\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%86%A1-%EB%B0%9B%EA%B8%B0\" aria-label=\"전송 받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전송 받기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"연결-끊기\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0-%EB%81%8A%EA%B8%B0\" aria-label=\"연결 끊기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결 끊기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"핸들러\" style=\"position:relative;\"><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC\" aria-label=\"핸들러 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핸들러</h3>\n<p>WebSocket은 <code class=\"language-text\">onopen, onclose, onerror, onmessage</code> 핸들러를 가질 수 있다.</p>\n<h2 id=\"node로-서버-구현\" style=\"position:relative;\"><a href=\"#node%EB%A1%9C-%EC%84%9C%EB%B2%84-%EA%B5%AC%ED%98%84\" aria-label=\"node로 서버 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node로 서버 구현</h2>\n<p>많은 코드가 생략되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> webSocketServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"websocket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> connections <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> wsServer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">webSocketServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  httpServer<span class=\"token operator\">:</span> server<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwsServer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// chatting 프로토콜을 받는다.</span>\n  <span class=\"token keyword\">var</span> connection <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chatting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  connections<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Connection accepted. Now \"</span> <span class=\"token operator\">+</span> connections<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 브로드캐스팅</span>\n      connections<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>utf8Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    connections <span class=\"token operator\">=</span> connections<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">!=</span> connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Connection disconnected. Now \"</span> <span class=\"token operator\">+</span> connections<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Express start to lsten port 3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p><a href=\"https://github.com/atobaum/simple-chatting-websocket-example\">Github</a>에 간단한 예제를 올려놓았다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/WebSockets/Writing_WebSocket_client_applications\">MDN</a></li>\n<li><a href=\"https://hpbn.co/websocket/\">High Performance Browser Networking</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc6455\">RFC6455</a></li>\n</ul>"},"slug":"/웹소켓에-대한-소고","tags":["Web","Web Socket"],"title":"웹소켓에 대한 소고","excerpt":"웹소켓을 알아보자","date":"2020-09-23T17:31:30+0900"}},"pageContext":{"slug":"/웹소켓에-대한-소고","nexttitle":"Jest에서 모듈 목킹하기","nextslug":"/jest에서-모듈-목킹하기","prevtitle":"TIL-20201013","prevslug":"/til-20201013"}},"staticQueryHashes":[]}