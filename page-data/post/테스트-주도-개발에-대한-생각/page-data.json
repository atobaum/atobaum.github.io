{"componentChunkName":"component---src-templates-post-jsx","path":"/post/테스트-주도-개발에-대한-생각","result":{"data":{"blogPost":{"latex":false,"parent":{"__typename":"MarkdownRemark","internal":{"content":"\n## TDD의 철학\n\n테스트 주도 개발(best driven development, TDD)은 단순히 테스트를 먼저 쓰는게 아니라 테스트가 개발의 중심이 되는 프로그램 개발 방법론이\u001d다. 말하자면 구현은 그저 테스트를 통과하기 위해 쓰는 것이다. 이 점이 TDD의 다른 점이다.\n\n보통의 개발에서는 테스트가 구현에 의존하나 TDD에서는 구현이 테스트에 의존한다. 따라서 개발을 시작할 때 어떤 클래스나 함수가 필요한지 묻지 않고 어떤 테스트가 필요한지 가장 먼저 물어야한다.\n\n테스트를 썼으면 일단 테스트가 통과하도록 만든다. 일단 `return 7;` 같이 테스트하는 값을 그대로 사용해도 괜찮다. 중요한 것을 빨간불을 초록불로 바꾸는 것이다. 이제 테스트 코드를 추가하고 초록불이 뜨게 한다. 그리고 중복을 제거하고 불필요한 테스트를 지운다.\n\n개발은 더도 말도 덜도 말고 테스트만 통과하도록 구현을 한다. 이때 물론 테스트를 통과하는 것이 중요하지만 테스트 이상의 구현을 하지 않는 것도 중요하다. 이렇게 함으로써 테스트는 문서의 역할도 하게 된다.\n\nTDD에서는 구현을 다 쓰고 테스트 코드를 작성하거나 그 반대가 아니다. TDD에서 테스트코드와 구현 코드는 계속 상호작용하면서 자라난다.\n\n## 조언\n\n### 빨간 불\n\n만약 개발을 하다가 빨간 불이 뜨면 일단 빨간 불을 지우는 일만 하라. 언제나 초록불이 떠 **있어야 한다.**\n반면 일을 마칠 때 실패하는 테스트를 쓰고 그만두는 것도 괜찮다. 다음에 왔을 때 실패한 테스트부터 고치는 일을 하면 되기 때문에 어디서부터 다시 시작할지 알기 쉽기 때문이다.\n\n### 테스트의 크기\n\nTDD에서 테스트는 빨리 끝나야한다. 짧으면 1초도 안되는 간격으로 테스트를 진행하기 때문에 테스트가 오래걸리면 안된다. 그만큼 테스트는 작아야한다.\n\n### 테스트의 양\n\n테스트는 얼마나 있어야 하는가? 저자는 개발이 두려우면 테스트 코드가 더 필요한 것이라고 말한다. 반면 테스트 코드를 쓰는 것이 지겨우면 그만 만들때라고 한다(한상 지겨운데??).\n\n개발을 진행하다보면 중복된 테스트 코드가 생긴다. 그럼 언제 중복된 테스트를 지워야하는가? 저자는 테스트를 삭제해도 자신감이 줄지 않을 때 삭제하라고 한다. 또한 만약 두 테스트가 같은 코드를 실행하더라고 둘이 다른 시나리오를 말한다면 남겨두라고 말한다.\n\n### 중복 제거하는 법\n\n예를들어 Dollar와 Franc 클래스가 있을 때 이를 Money로 추상화하고 싶다고 해보자.\n먼저 빈 Money 클래스를 만들고 Dollar와 Franc이 Money를 상속받게 한다. Money 클래스는 비어있기 때문에 테스트는 깨지지 않는다.\n그 후 각 클래스에 있는 중복된 메서드의 테스트를 수정한다(메서드명, 자료형 등). 이제 각 클래스의 구현을 수정된 테스트에 맞추어 바꾼다. 이제 각 클래스의 메서드가 같아졌을 것이다.\n두 메서드를 Money 클래스로 옮기고 각 클래서의 메서드를 삭제한다. 테스트틑 깨지지 않는다.\n\n## 장점\n\n### 리팩토링을 과감하게 할 수 있게 한다.\n\n제일 먼저 떠오르는 장점은 리팩토링이 두렵지 않다는 것이다. 코드를 바꾸어도 테스트가 있기 때문에 수정이 코드를 망치는지 알기 쉽다.\n\n### 테스트 코드는 설계의 문제를 알려줄 수도 있다.\n\n- 너무 긴 셋업 코드가 필요하면 객체가 너무 크다는 뜻이다. 객체를 나누자.\n- 셋업 코드가 중복된다면 서로 엉킨 객체들이 많다는 뜻이다. 결합도를 낮추어보도록 해보자.\n- 테스트를 실행하는데 시간이 너무 오래걸린다면 작은 부분만 테스트 할 수 없다는 뜻이고 설계에 문제가 있다는 것을 암시한다. 실행 시간이 너무 오래걸리면 테스트를 자주 실행시킬 수 없다.\n- 예상치 못하게 실패하는 테스트가 있으면 코드에 이상한 의존성이 있다는것을 암시한다.\n\n### 문서화\n\n테스트를 문서로 사용할 수도 있다.\n\n## 후기\n\nTDD는 생각보다 짧은 주기로 돌아간다. TDD를 좀 더 연습해보고 책을 한 번 더 읽으면 새로 보이는게 있을 것 같다.\n\n## Reference\n\n- 켄트 벡. 테스트 주도 개발. 인사이트, 2014.\n","description":null,"ignoreType":null,"mediaType":null},"html":"<h2 id=\"tdd의-철학\" style=\"position:relative;\"><a href=\"#tdd%EC%9D%98-%EC%B2%A0%ED%95%99\" aria-label=\"tdd의 철학 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDD의 철학</h2>\n<p>테스트 주도 개발(best driven development, TDD)은 단순히 테스트를 먼저 쓰는게 아니라 테스트가 개발의 중심이 되는 프로그램 개발 방법론이\u001d다. 말하자면 구현은 그저 테스트를 통과하기 위해 쓰는 것이다. 이 점이 TDD의 다른 점이다.</p>\n<p>보통의 개발에서는 테스트가 구현에 의존하나 TDD에서는 구현이 테스트에 의존한다. 따라서 개발을 시작할 때 어떤 클래스나 함수가 필요한지 묻지 않고 어떤 테스트가 필요한지 가장 먼저 물어야한다.</p>\n<p>테스트를 썼으면 일단 테스트가 통과하도록 만든다. 일단 <code class=\"language-text\">return 7;</code> 같이 테스트하는 값을 그대로 사용해도 괜찮다. 중요한 것을 빨간불을 초록불로 바꾸는 것이다. 이제 테스트 코드를 추가하고 초록불이 뜨게 한다. 그리고 중복을 제거하고 불필요한 테스트를 지운다.</p>\n<p>개발은 더도 말도 덜도 말고 테스트만 통과하도록 구현을 한다. 이때 물론 테스트를 통과하는 것이 중요하지만 테스트 이상의 구현을 하지 않는 것도 중요하다. 이렇게 함으로써 테스트는 문서의 역할도 하게 된다.</p>\n<p>TDD에서는 구현을 다 쓰고 테스트 코드를 작성하거나 그 반대가 아니다. TDD에서 테스트코드와 구현 코드는 계속 상호작용하면서 자라난다.</p>\n<h2 id=\"조언\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EC%96%B8\" aria-label=\"조언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조언</h2>\n<h3 id=\"빨간-불\" style=\"position:relative;\"><a href=\"#%EB%B9%A8%EA%B0%84-%EB%B6%88\" aria-label=\"빨간 불 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빨간 불</h3>\n<p>만약 개발을 하다가 빨간 불이 뜨면 일단 빨간 불을 지우는 일만 하라. 언제나 초록불이 떠 <strong>있어야 한다.</strong>\n반면 일을 마칠 때 실패하는 테스트를 쓰고 그만두는 것도 괜찮다. 다음에 왔을 때 실패한 테스트부터 고치는 일을 하면 되기 때문에 어디서부터 다시 시작할지 알기 쉽기 때문이다.</p>\n<h3 id=\"테스트의-크기\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%81%AC%EA%B8%B0\" aria-label=\"테스트의 크기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트의 크기</h3>\n<p>TDD에서 테스트는 빨리 끝나야한다. 짧으면 1초도 안되는 간격으로 테스트를 진행하기 때문에 테스트가 오래걸리면 안된다. 그만큼 테스트는 작아야한다.</p>\n<h3 id=\"테스트의-양\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%96%91\" aria-label=\"테스트의 양 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트의 양</h3>\n<p>테스트는 얼마나 있어야 하는가? 저자는 개발이 두려우면 테스트 코드가 더 필요한 것이라고 말한다. 반면 테스트 코드를 쓰는 것이 지겨우면 그만 만들때라고 한다(한상 지겨운데??).</p>\n<p>개발을 진행하다보면 중복된 테스트 코드가 생긴다. 그럼 언제 중복된 테스트를 지워야하는가? 저자는 테스트를 삭제해도 자신감이 줄지 않을 때 삭제하라고 한다. 또한 만약 두 테스트가 같은 코드를 실행하더라고 둘이 다른 시나리오를 말한다면 남겨두라고 말한다.</p>\n<h3 id=\"중복-제거하는-법\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EB%B3%B5-%EC%A0%9C%EA%B1%B0%ED%95%98%EB%8A%94-%EB%B2%95\" aria-label=\"중복 제거하는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중복 제거하는 법</h3>\n<p>예를들어 Dollar와 Franc 클래스가 있을 때 이를 Money로 추상화하고 싶다고 해보자.\n먼저 빈 Money 클래스를 만들고 Dollar와 Franc이 Money를 상속받게 한다. Money 클래스는 비어있기 때문에 테스트는 깨지지 않는다.\n그 후 각 클래스에 있는 중복된 메서드의 테스트를 수정한다(메서드명, 자료형 등). 이제 각 클래스의 구현을 수정된 테스트에 맞추어 바꾼다. 이제 각 클래스의 메서드가 같아졌을 것이다.\n두 메서드를 Money 클래스로 옮기고 각 클래서의 메서드를 삭제한다. 테스트틑 깨지지 않는다.</p>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<h3 id=\"리팩토링을-과감하게-할-수-있게-한다\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81%EC%9D%84-%EA%B3%BC%EA%B0%90%ED%95%98%EA%B2%8C-%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B2%8C-%ED%95%9C%EB%8B%A4\" aria-label=\"리팩토링을 과감하게 할 수 있게 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리팩토링을 과감하게 할 수 있게 한다.</h3>\n<p>제일 먼저 떠오르는 장점은 리팩토링이 두렵지 않다는 것이다. 코드를 바꾸어도 테스트가 있기 때문에 수정이 코드를 망치는지 알기 쉽다.</p>\n<h3 id=\"테스트-코드는-설계의-문제를-알려줄-수도-있다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EB%8A%94-%EC%84%A4%EA%B3%84%EC%9D%98-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%95%8C%EB%A0%A4%EC%A4%84-%EC%88%98%EB%8F%84-%EC%9E%88%EB%8B%A4\" aria-label=\"테스트 코드는 설계의 문제를 알려줄 수도 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 코드는 설계의 문제를 알려줄 수도 있다.</h3>\n<ul>\n<li>너무 긴 셋업 코드가 필요하면 객체가 너무 크다는 뜻이다. 객체를 나누자.</li>\n<li>셋업 코드가 중복된다면 서로 엉킨 객체들이 많다는 뜻이다. 결합도를 낮추어보도록 해보자.</li>\n<li>테스트를 실행하는데 시간이 너무 오래걸린다면 작은 부분만 테스트 할 수 없다는 뜻이고 설계에 문제가 있다는 것을 암시한다. 실행 시간이 너무 오래걸리면 테스트를 자주 실행시킬 수 없다.</li>\n<li>예상치 못하게 실패하는 테스트가 있으면 코드에 이상한 의존성이 있다는것을 암시한다.</li>\n</ul>\n<h3 id=\"문서화\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%84%9C%ED%99%94\" aria-label=\"문서화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문서화</h3>\n<p>테스트를 문서로 사용할 수도 있다.</p>\n<h2 id=\"후기\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EA%B8%B0\" aria-label=\"후기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후기</h2>\n<p>TDD는 생각보다 짧은 주기로 돌아간다. TDD를 좀 더 연습해보고 책을 한 번 더 읽으면 새로 보이는게 있을 것 같다.</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>켄트 벡. 테스트 주도 개발. 인사이트, 2014.</li>\n</ul>"},"slug":"/테스트-주도-개발에-대한-생각","tags":["TDD","Review"],"title":"테스트 주도 개발에 대한 생각","excerpt":"","date":"2021-01-02T09:20:06.927Z"}},"pageContext":{"slug":"/테스트-주도-개발에-대한-생각","nexttitle":"BOJ 1135 - 뉴스 전하기","nextslug":"/boj-1135-뉴스-전하기","prevtitle":"Big Test","prevslug":"/big-sample-test"}},"staticQueryHashes":[]}