{"componentChunkName":"component---src-templates-post-jsx","path":"/post/boj-2188-축사배정","result":{"data":{"blogPost":{"latex":false,"parent":{"__typename":"MarkdownRemark","internal":{"content":"\n# BOJ 2188 - 축사배정\n\n[문제](https://www.acmicpc.net/problem/2188)\n\n## 아이디어\n최대 유량 알고리즘을 사용한다.\n\n가상의 source, sink과 각 소와 축사를 하나의 노드로 본다.\nsource에서 각 소로 1이 흐를 수 있고 각 소들이 선호하는 축사로 1씩 흐를 수 있게 만든다.\n그리고 모든 축사에서 sink로 1씩 흐를 수 있게 만든다.\n모든 소는 자기가 원하는 축사로만 흐를 수 있고 sink로 흐를 수 있는 노드는 축사밖에 없으므로 source -> sink로 흐를 수 있는 최대 유량을 구하면 답을 구할 수 있다.\n\n## 소스\n\n```cpp\n#include <algorithm> //sort\n#include <climits>\n#include <cstring>    //memset\n#include <functional> //greater\n#include <iostream>\n#include <queue>\n#include <utility> //pair\n#include <vector>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n#define reap(i, a, b) for (int i = a; i < b; i++)\n#define in1(a) cin >> a;\n#define in2(a, b) cin >> a >> b;\n#define in3(a, b, c) cin >> a >> b >> c;\n#define in4(a, b, c, d) cin >> a >> b >> c >> d;\n#define out1(a) cout << a << endl;\n#define out2(a, b) cout << a << \" \" << b << endl;\n#define out3(a, b, c) cout << a << \" \" << b << \" \" << c << endl;\n#define out4(a, b, c, d) cout << a << \" \" << b << \" \" << c << \" \" << d << endl;\n\n// 1. 소, 축사 하나 당 노드 한개 + 입력, 출구 노드 => 총 N+M+2개. N, M <= 200\n// 2. 입력노드는 각 소 노드로 1마리씩 흐른다.\n// 3. 소 노드는 그 소가 선호하는 축사 노드로 1의 파이프를 갖는다.\n// 4. 모든 축사는 출구 노드로 1의 용량을 가진다.\n// 이제 최대 유량 구해서 흐르는 소를 구하면 답.\n\n// 0: source, 1: sink, 100~299: cow, 300~499: 축사\n#define MAX_MAP_SIZE 100 + 200 + 200\n\nint flow[MAX_MAP_SIZE][MAX_MAP_SIZE], capacity[MAX_MAP_SIZE][MAX_MAP_SIZE];\nint N, M;\n\nint cow_offset = 2, house_offset;\nint map_size;\n\nint solve();\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  memset(flow, 0, sizeof(flow));\n  memset(capacity, 0, sizeof(capacity));\n\n  in2(N, M);\n  house_offset = 2 + N;\n  map_size = 2 + N + M;\n  reap(i, 0, N) {\n    // source to cow\n    capacity[0][cow_offset + i] = 1;\n\n    // cow to house\n    int S, temp;\n    in1(S);\n    reap(j, 0, S) {\n      in1(temp);\n      capacity[cow_offset + i][house_offset + temp - 1] = 1;\n    }\n  }\n\n  // house to sink\n  reap(i, 0, M) { capacity[house_offset + i][1] = 1; }\n\n  int answer = solve();\n  out1(answer);\n\n  return 0;\n}\n\n// 0 -> 1 길 찾기\nbool bfs(int *parent) {\n  queue<int> q;\n  q.push(0);\n\n  while (!q.empty()) {\n    int cur = q.front();\n    q.pop();\n\n    reap(i, 0, map_size + 1) {\n      if (parent[i] == -1 && capacity[cur][i] > flow[cur][i]) {\n        parent[i] = cur;\n\n        if (i == 1)\n          return true;\n        q.push(i);\n      }\n    }\n  }\n\n  return false;\n}\n\n// 0 -> 1 최대 유량 구하기\nint solve() {\n  int res = 0;\n  int parent[MAX_MAP_SIZE];\n\n  while (true) {\n    memset(parent, -1, sizeof(parent));\n    if (!bfs(parent))\n      break;\n\n    // 유량 구하기\n    int max_flow = INT_MAX;\n    // out1(\"\");\n    for (int cur = 1; cur != 0; cur = parent[cur]) {\n      // out1(cur);\n      int p = parent[cur];\n      max_flow = min(max_flow, capacity[p][cur] - flow[p][cur]);\n    }\n\n    // update\n    for (int cur = 1; cur != 0; cur = parent[cur]) {\n      int p = parent[cur];\n      flow[p][cur] += max_flow;\n      flow[cur][p] -= max_flow;\n    }\n\n    res += max_flow;\n  }\n  return res;\n}\n```\n\n","description":null,"ignoreType":null,"mediaType":null},"html":"<h1 id=\"boj-2188---축사배정\" style=\"position:relative;\"><a href=\"#boj-2188---%EC%B6%95%EC%82%AC%EB%B0%B0%EC%A0%95\" aria-label=\"boj 2188   축사배정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BOJ 2188 - 축사배정</h1>\n<p><a href=\"https://www.acmicpc.net/problem/2188\">문제</a></p>\n<h2 id=\"아이디어\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\" aria-label=\"아이디어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이디어</h2>\n<p>최대 유량 알고리즘을 사용한다.</p>\n<p>가상의 source, sink과 각 소와 축사를 하나의 노드로 본다.\nsource에서 각 소로 1이 흐를 수 있고 각 소들이 선호하는 축사로 1씩 흐를 수 있게 만든다.\n그리고 모든 축사에서 sink로 1씩 흐를 수 있게 만든다.\n모든 소는 자기가 원하는 축사로만 흐를 수 있고 sink로 흐를 수 있는 노드는 축사밖에 없으므로 source -> sink로 흐를 수 있는 최대 유량을 구하면 답을 구할 수 있다.</p>\n<h2 id=\"소스\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%8A%A4\" aria-label=\"소스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소스</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span> <span class=\"token comment\">//sort</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;climits></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span>    <span class=\"token comment\">//memset</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> <span class=\"token comment\">//greater</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;utility></span> <span class=\"token comment\">//pair</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">reap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">in1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">in2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">in3</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">in4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c <span class=\"token operator\">>></span> d<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">out1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">out2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span> <span class=\"token expression\"><span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">out3</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span> <span class=\"token expression\"><span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span> <span class=\"token expression\"><span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">out4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span> <span class=\"token expression\"><span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span> <span class=\"token expression\"><span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> </span><span class=\"token string\">\" \"</span> <span class=\"token expression\"><span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></span></span>\n\n<span class=\"token comment\">// 1. 소, 축사 하나 당 노드 한개 + 입력, 출구 노드 => 총 N+M+2개. N, M &lt;= 200</span>\n<span class=\"token comment\">// 2. 입력노드는 각 소 노드로 1마리씩 흐른다.</span>\n<span class=\"token comment\">// 3. 소 노드는 그 소가 선호하는 축사 노드로 1의 파이프를 갖는다.</span>\n<span class=\"token comment\">// 4. 모든 축사는 출구 노드로 1의 용량을 가진다.</span>\n<span class=\"token comment\">// 이제 최대 유량 구해서 흐르는 소를 구하면 답.</span>\n\n<span class=\"token comment\">// 0: source, 1: sink, 100~299: cow, 300~499: 축사</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAX_MAP_SIZE <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span> <span class=\"token operator\">+</span> <span class=\"token number\">200</span></span></span>\n\n<span class=\"token keyword\">int</span> flow<span class=\"token punctuation\">[</span>MAX_MAP_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAX_MAP_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">[</span>MAX_MAP_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>MAX_MAP_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> cow_offset <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> house_offset<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> map_size<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flow<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>flow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">in2</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  house_offset <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> N<span class=\"token punctuation\">;</span>\n  map_size <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> N <span class=\"token operator\">+</span> M<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// source to cow</span>\n    capacity<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cow_offset <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// cow to house</span>\n    <span class=\"token keyword\">int</span> S<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">in1</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reap</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">in1</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      capacity<span class=\"token punctuation\">[</span>cow_offset <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>house_offset <span class=\"token operator\">+</span> temp <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// house to sink</span>\n  <span class=\"token function\">reap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> capacity<span class=\"token punctuation\">[</span>house_offset <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">out1</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 0 -> 1 길 찾기</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n  q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">reap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> map_size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> capacity<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> flow<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 0 -> 1 최대 유량 구하기</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">[</span>MAX_MAP_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 유량 구하기</span>\n    <span class=\"token keyword\">int</span> max_flow <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// out1(\"\");</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cur <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// out1(cur);</span>\n      <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      max_flow <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>max_flow<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> flow<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// update</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> cur <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cur <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      flow<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> max_flow<span class=\"token punctuation\">;</span>\n      flow<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> max_flow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    res <span class=\"token operator\">+=</span> max_flow<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"},"slug":"/boj-2188-축사배정","tags":["BOJ","알고리즘","최대유량"],"title":"BOJ 2188 - 축사배정","excerpt":"백준 2188번 - 축사배정","date":"2020-12-03T08:11:40.000Z"}},"pageContext":{"slug":"/boj-2188-축사배정","nexttitle":"오일러 정리","nextslug":"/오일러-정리","prevtitle":"BOJ 1135 - 뉴스 전하기","prevslug":"/boj-1135-뉴스-전하기"}},"staticQueryHashes":[]}